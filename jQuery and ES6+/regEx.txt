
Regular Expressions (Reg Ex) , github repo - https://github.com/iamshaunjp/regex-playlist

    Tutorial #1 - What is RegEx 

            - Allows us to check a series of characters for 'matches'
            - e.g. it allows us to check a form field to try and match a valid email addres
                    - it must have an @ symbol at a certain position
                    - it must end in an extension like .com or .org or co.uk
            - Regular Expressions allow us to check these kinds of things

    Tutorial #2 - Simple RegEx Patterns

            - From this tutorial onward we worked on line at 
                https://regex101.com/
            - make sure javascript is selected as the flavor
            - deselect the gm flag and multi line
            - regex always starts with / and ends with /
            - we write our regex on top and can select different filters as we want 
                - like global will earch for all mathes not just the first one 
                - insensetive will make the search insensetive to upper or lower

    Tutorial #3 - Character Sets 

            to  match changeable characters with words 
                - [ng]inja
                    - this will look for ninja and ginja
                - [abcde]
                    - this will look for a or b or c or d or e
                - [abc]123
                    - this will look for a123 or b123 or c123
            
            exclude - match all except a certain character

                [^pni]n - this will match everything except p or n or i 

    Tutorial #4 - Ranges

            - instead of typing out all of the characters we can supply a range 

                /[a-z]ss/ - this will match every letter in the alphabet + ss 
                /[A-Z]ss/ - same
                /[0-9]ss/ - same 

            - we can also combine them 

                /[a-zA-Z0-9]ss - will match all of them as above 

    Tutorial #5 - Repeating Characters 

            to check the validity of the char and number of char 
                we can use /[0-9]+number of chars under 10 or 
                - example 11 digit phone number 
                    /[0-9]{11} // best way, also works for letters 

            - if we want a range 
                    /[0-9]{5, 8} // checks between 5 and 8 digits // works for letters too 

            - if we want to use "atleast" we remove the second argument 
                    /[0-9]{5,} // means atleast 5 characters 

    Tutorial #6 - Metacharacters

            - are special characters in regex  
                - \d - match any digit character (same as [0-9])
                - \w match any word character (a-z, A-Z, 0-9 and _'s)
                - \s match a whitespace character (spaces, tabs etc)
                - \t match a tab character only 

                d -- matches the literal character 'd'
                \d 00 matches any digit character 

                example 
                    regex - \d{3}\s\w{5}
                        // this means 3 digits then a white space then 5 characters (words or digits or _) 

    Tutorial #7 - Special Characters 

        - behave as weirdly as possible 
             '+' - one or more quantifier
             '\' escapes character 
             '[]' character set 
             '[^]' the negate symbol in character set 
             '?' zero or one quantifier (makes a preceding char optional)
             '.' any character whatsoever(except the new line character)
             '*' The 0 or more quantifier( a bit like +)

             example abc\* - escapes and matches directly with *
                .+ - means any character + however long you want 

    Tutorial #8 - Starting & Ending Patterns 

            ^[a-z]{5}$

                // this means the carrot (^) represents, it should start with 5 letters 
                // this means the $ represents, it should end with 5 letters 
                // this is helpful wehn we want to sspecify  only 5 letter word to match 

    Tutorial #9 - Alternate Characters 

            - means evaluate this or this 

                (d|s)ome - matches dome or some
                (pet|toy|crazy)? rabbit - matches pet rabbit or toy rabbit or crazy rabbit 

    Tutorial #10 - Creating a Form

            we just created a form or get the form code from https://github.com/iamshaunjp/regex-playlist

    Tutorial #11 - Making RegEx in js 

            - 2 ways    

                - one way is to write it out as a line with combination of regex expression and flags
                    
                    var reg = /[a-z]/gi
                
                - another way is to create a RegExp object which takes in regex and flag
                    
                    var reg2 = new RegExp(/[a-z]/, 'ig');

    Tutorial #12 - Telephone RegEx 

        - the good approach to create various reg ex rules is in an object 
        - here we created a telephone reg ex that is 11 characters long 

            const patterns = {

                 telephone : /^\d{11}$/   -- can also use [0-9] instead of \d

            }           

    Tutorial #13 - Testing a RegEx Pattern

            - our regex 

                const patterns = {

                    telephone : /^\d{11}$/

                }

            - first we fetched our inputs 

                const inputs = document.querySelectorAll('input');

            - then we assigned event listeners on keydown 

                        inputs.forEach((input)=>{

                            input.addEventListener('keyup', (e)=>{


                                // console.log(e.target.attributes.name.value);

                                validate(e.target, patterns[e.target.attributes.name.value]);
                            })


                        })

            - then we created  function that tested for regex 

                //validation function 
                    function validate(field, regex){


                        if(regex.test(field.value)){

                            field.className = 'valid';
                        }

                        else{

                            field.className = 'invalid';
                        }


                    }

    Tutorial #14 - Matching a Username, password and slug 

            const patterns = {

                telephone : /^\d{11}$/,
                username : /^[a-z\d]{5,12}$/i,
                password : /^[\w@-]{8,20}$/i,
                slug : /^[a-z\d-]{8,20}$/

            }

    Tutorial #15 - Email RegEx Pattern 
                1           2           3         4
            (yourname) @ (domain) . (exension)(.again)

                (theboss) @ (thenetninja) . (co) (.uk)

        1. any letters, numbers, dots and /or hyphens
        2. any letters, numbers and / or hyphens 
        3. any letters 
        4. a dot(.) then any letters  (optional)

             email : /^([a-z\d\.-]+)@([a-z\d-]+)\.([a-z]{2,8})(\.[a-z]{2,8})?$/     // we can't jus put . we have to put \.

    Tutorial #16 - Finishing touches to make the colors light up 

            - we just made the css to change when it's invalid or valid 








